document.addEventListener('DOMContentLoaded', () => {

    const galeria = document.getElementById('galeria');
    // ... (resto das suas constantes de modal aqui)
    const modal = document.getElementById('modal-upload');
    const btnAbrir = document.getElementById('btn-abrir-modal');
    const btnFechar = document.getElementById('btn-fechar-modal');
    const form = document.querySelector('#modal-upload form');

    // Fun√ß√µes do Modal
    const abrirModal = () => modal.classList.add('aberto');
    const fecharModal = () => modal.classList.remove('aberto');
    btnAbrir.addEventListener('click', abrirModal);
    btnFechar.addEventListener('click', fecharModal);

    // Fun√ß√£o para criar um cart√£o de foto no HTML (AGORA COM BOT√ÉO DE DELETE)
    const criarCartao = (foto) => {
        // A gente adiciona um 'data-id' para saber qual foto apagar
        // E tamb√©m o bot√£o com a classe 'btn-delete'
        return `
            <article class="cartao-foto" data-id="${foto.id}">
                <button class="btn-delete">üóëÔ∏è</button>
                <img src="${foto.caminho}" alt="${foto.titulo}">
                <div class="info-foto">
                    <h3>${foto.titulo}</h3>
                    <p>${foto.descricao}</p>
                </div>
            </article>
        `;
    };

    // Fun√ß√£o para carregar todas as fotos do servidor
    const carregarFotos = async () => {
        const response = await fetch('/fotos');
        const fotos = await response.json();
        galeria.innerHTML = ''; // Limpa a galeria
        fotos.forEach(foto => {
            galeria.insertAdjacentHTML('beforeend', criarCartao(foto));
        });
    };

    // L√≥gica do formul√°rio de envio
    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);
        await fetch('/upload', { method: 'POST', body: formData });
        await carregarFotos(); // Recarrega a galeria
        form.reset();
        fecharModal();
    });

    // ‚ú®‚ú®‚ú® NOVA L√ìGICA PARA DELETAR ‚ú®‚ú®‚ú®
    galeria.addEventListener('click', async (event) => {
        // Verifica se o que foi clicado foi um bot√£o de deletar
        if (event.target.classList.contains('btn-delete')) {
            const cartao = event.target.closest('.cartao-foto');
            const id = cartao.dataset.id;
            
            // Pergunta de confirma√ß√£o para n√£o apagar sem querer
            if (confirm('Tem certeza que quer apagar esta mem√≥ria para sempre?')) {
                const response = await fetch(`/fotos/${id}`, { method: 'DELETE' });
                const result = await response.json();
                console.log(result.message);
                
                // Remove o cart√£o da tela
                cartao.remove();
            }
        }
    });

    // Carrega todas as fotos quando a p√°gina abre
    carregarFotos();
    // ‚ú®‚ú®‚ú® NOVA L√ìGICA DA M√öSICA ‚ú®‚ú®‚ú®
const audio = document.getElementById('musica-fundo');
const btnMusica = document.getElementById('btn-musica');

// Garante que a m√∫sica comece com um volume mais agrad√°vel
audio.volume = 0.3; // 30% do volume, voc√™ pode ajustar!

btnMusica.addEventListener('click', () => {
  // Se a m√∫sica estiver pausada, d√™ play e mude o √≠cone
  if (audio.paused) {
    audio.play();
    btnMusica.textContent = '‚è∏Ô∏è';
  } else { // Se estiver tocando, pause e mude o √≠cone
    audio.pause();
    btnMusica.textContent = '‚ñ∂Ô∏è';
  }
});

// Tenta dar autoplay de forma suave quando a p√°gina carrega
// Se o navegador bloquear, n√£o tem problema, o usu√°rio pode clicar.
const tentarAutoplay = async () => {
    try {
        await audio.play();
        btnMusica.textContent = '‚è∏Ô∏è';
    } catch (err) {
        console.log("Autoplay foi bloqueado pelo navegador. Normal!");
        btnMusica.textContent = '‚ñ∂Ô∏è';
    }
};

// ... (resto do seu c√≥digo, como o carregarFotos()) ...

// No final, troque a linha carregarFotos(); por esta, pra fazer as duas coisas
Promise.all([
    carregarFotos(),
    tentarAutoplay()
]);

}); // << Fim do 'DOMContentLoaded'
